diff --git a/lib/react-pdf.browser.js b/lib/react-pdf.browser.js
index 9335ae3930112afaeec37d0540ab4e4b72109807..7f24f537c41b4f42839f0ff1d393e5381822903a 100644
--- a/lib/react-pdf.browser.js
+++ b/lib/react-pdf.browser.js
@@ -9,6 +9,7 @@ import layoutDocument from '@react-pdf/layout';
 import { upperFirst } from '@react-pdf/fns';
 import Reconciler from '@react-pdf/reconciler';
 import { jsx } from 'react/jsx-runtime';
+import { on } from 'events';
 
 const omitNils = object => Object.fromEntries(Object.entries(object).filter(_ref => {
   let [, value] = _ref;
@@ -302,25 +303,36 @@ const usePDF = function (_temp) {
 
   // Setup rendering queue
   useEffect(() => {
-    const renderQueue = queue({
+    const renderQueue = new queue({
       autostart: true,
       concurrency: 1
     });
+
     const queueDocumentRender = () => {
       setState(prev => ({
         ...prev,
         loading: true
       }));
-      renderQueue.splice(0, renderQueue.length, () => state.error ? Promise.resolve() : pdfInstance.current.toBlob());
+      renderQueue.splice(0, renderQueue.length, () => {
+        if (state.error) {
+          return Promise.resolve();
+        }
+        return pdfInstance.current.toBlob().catch(error => {
+          console.error('Error during toBlob execution:', error);
+          throw error;
+        });
+      });
     };
+
     const onRenderFailed = error => {
-      console.error(error);
+      console.error('Render failed:', error);
       setState(prev => ({
         ...prev,
         loading: false,
         error
       }));
     };
+
     const onRenderSuccessful = blob => {
       setState({
         blob,
@@ -329,13 +341,19 @@ const usePDF = function (_temp) {
         url: URL.createObjectURL(blob)
       });
     };
+
     pdfInstance.current = pdf();
     pdfInstance.current.on('change', queueDocumentRender);
+
     if (document) {
       pdfInstance.current.updateContainer(document);
     }
-    renderQueue.on('error', onRenderFailed);
-    renderQueue.on('success', onRenderSuccessful);
+
+    renderQueue.addEventListener('error', onRenderFailed);
+    renderQueue.addEventListener('success', (e) => 
+      onRenderSuccessful(e.detail.result[0])
+    );
+
     return () => {
       renderQueue.end();
       pdfInstance.current.removeListener('change', queueDocumentRender);
